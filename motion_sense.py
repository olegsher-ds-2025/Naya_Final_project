{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "717796f6",
   "metadata": {
    "_cell_guid": "b21881d2-333c-47ba-a538-a22053a19dcc",
    "_uuid": "47657ddf-b570-4c8d-aaa3-eb0a484888b9",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:28.413884Z",
     "iopub.status.busy": "2025-03-18T14:27:28.413500Z",
     "iopub.status.idle": "2025-03-18T14:27:29.715620Z",
     "shell.execute_reply": "2025-03-18T14:27:29.714544Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.310759,
     "end_time": "2025-03-18T14:27:29.717432",
     "exception": false,
     "start_time": "2025-03-18T14:27:28.406673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/motionsense-dataset/data_subjects_info.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/__MACOSX/A_DeviceMotion_data/dws_1/._sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/__MACOSX/A_DeviceMotion_data/jog_9/._sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/__MACOSX/A_DeviceMotion_data/jog_9/._sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/__MACOSX/A_DeviceMotion_data/wlk_7/._sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_1/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_12/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_5/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_4/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_15/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_8/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_14/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_16/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/sit_13/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_2/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/std_6/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/dws_11/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/jog_9/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/ups_3/sub_7.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_16.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_18.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_3.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_12.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_1.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_4.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_21.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_2.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_19.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_17.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_8.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_6.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_22.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_9.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_20.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_5.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_15.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_24.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_14.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_13.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_11.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_10.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_23.csv\n",
      "/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/wlk_7/sub_7.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9394c02e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:29.730795Z",
     "iopub.status.busy": "2025-03-18T14:27:29.730280Z",
     "iopub.status.idle": "2025-03-18T14:27:31.326772Z",
     "shell.execute_reply": "2025-03-18T14:27:31.325876Z"
    },
    "papermill": {
     "duration": 1.605047,
     "end_time": "2025-03-18T14:27:31.328736",
     "exception": false,
     "start_time": "2025-03-18T14:27:29.723689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78225410",
   "metadata": {
    "papermill": {
     "duration": 0.00531,
     "end_time": "2025-03-18T14:27:31.339765",
     "exception": false,
     "start_time": "2025-03-18T14:27:31.334455",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "519f38c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:31.352225Z",
     "iopub.status.busy": "2025-03-18T14:27:31.351746Z",
     "iopub.status.idle": "2025-03-18T14:27:31.369140Z",
     "shell.execute_reply": "2025-03-18T14:27:31.367894Z"
    },
    "papermill": {
     "duration": 0.0258,
     "end_time": "2025-03-18T14:27:31.371125",
     "exception": false,
     "start_time": "2025-03-18T14:27:31.345325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dss = pd.read_csv('/kaggle/input/motionsense-dataset/data_subjects_info.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "601455f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:31.384134Z",
     "iopub.status.busy": "2025-03-18T14:27:31.383805Z",
     "iopub.status.idle": "2025-03-18T14:27:31.409067Z",
     "shell.execute_reply": "2025-03-18T14:27:31.408025Z"
    },
    "papermill": {
     "duration": 0.033794,
     "end_time": "2025-03-18T14:27:31.410845",
     "exception": false,
     "start_time": "2025-03-18T14:27:31.377051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "      <th>weight</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>102</td>\n",
       "      <td>188</td>\n",
       "      <td>46</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>72</td>\n",
       "      <td>180</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>48</td>\n",
       "      <td>161</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>90</td>\n",
       "      <td>176</td>\n",
       "      <td>31</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>48</td>\n",
       "      <td>164</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>76</td>\n",
       "      <td>180</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>62</td>\n",
       "      <td>175</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>52</td>\n",
       "      <td>161</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>93</td>\n",
       "      <td>190</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>72</td>\n",
       "      <td>164</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>70</td>\n",
       "      <td>178</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>60</td>\n",
       "      <td>167</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>60</td>\n",
       "      <td>178</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>70</td>\n",
       "      <td>180</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>70</td>\n",
       "      <td>185</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>96</td>\n",
       "      <td>172</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>76</td>\n",
       "      <td>180</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>54</td>\n",
       "      <td>164</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>78</td>\n",
       "      <td>164</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>88</td>\n",
       "      <td>180</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>52</td>\n",
       "      <td>165</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>100</td>\n",
       "      <td>186</td>\n",
       "      <td>31</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>68</td>\n",
       "      <td>170</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>74</td>\n",
       "      <td>173</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    code  weight  height  age  gender\n",
       "0      1     102     188   46       1\n",
       "1      2      72     180   28       1\n",
       "2      3      48     161   28       0\n",
       "3      4      90     176   31       1\n",
       "4      5      48     164   23       0\n",
       "5      6      76     180   28       1\n",
       "6      7      62     175   30       0\n",
       "7      8      52     161   24       0\n",
       "8      9      93     190   32       1\n",
       "9     10      72     164   31       0\n",
       "10    11      70     178   24       1\n",
       "11    12      60     167   33       1\n",
       "12    13      60     178   33       1\n",
       "13    14      70     180   35       1\n",
       "14    15      70     185   33       1\n",
       "15    16      96     172   29       0\n",
       "16    17      76     180   26       1\n",
       "17    18      54     164   26       0\n",
       "18    19      78     164   28       0\n",
       "19    20      88     180   25       1\n",
       "20    21      52     165   24       1\n",
       "21    22     100     186   31       1\n",
       "22    23      68     170   25       0\n",
       "23    24      74     173   18       0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dss.head(24)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "17926137",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:31.424042Z",
     "iopub.status.busy": "2025-03-18T14:27:31.423718Z",
     "iopub.status.idle": "2025-03-18T14:27:31.450090Z",
     "shell.execute_reply": "2025-03-18T14:27:31.448910Z"
    },
    "papermill": {
     "duration": 0.034929,
     "end_time": "2025-03-18T14:27:31.451898",
     "exception": false,
     "start_time": "2025-03-18T14:27:31.416969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 24 entries, 0 to 23\n",
      "Data columns (total 5 columns):\n",
      " #   Column  Non-Null Count  Dtype\n",
      "---  ------  --------------  -----\n",
      " 0   code    24 non-null     int64\n",
      " 1   weight  24 non-null     int64\n",
      " 2   height  24 non-null     int64\n",
      " 3   age     24 non-null     int64\n",
      " 4   gender  24 non-null     int64\n",
      "dtypes: int64(5)\n",
      "memory usage: 1.1 KB\n"
     ]
    }
   ],
   "source": [
    "dss.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "227c0048",
   "metadata": {
    "papermill": {
     "duration": 0.005746,
     "end_time": "2025-03-18T14:27:31.463865",
     "exception": false,
     "start_time": "2025-03-18T14:27:31.458119",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "as i understand we have 24 people in test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f04a5182",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:31.477083Z",
     "iopub.status.busy": "2025-03-18T14:27:31.476739Z",
     "iopub.status.idle": "2025-03-18T14:27:35.437694Z",
     "shell.execute_reply": "2025-03-18T14:27:35.436596Z"
    },
    "papermill": {
     "duration": 3.970362,
     "end_time": "2025-03-18T14:27:35.440172",
     "exception": false,
     "start_time": "2025-03-18T14:27:31.469810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 810.361x750 with 12 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Scatter plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.scatterplot(x=dss[\"height\"], y=dss[\"weight\"], hue=dss[\"gender\"], style=dss[\"gender\"], s=100)\n",
    "plt.xlabel(\"Height (cm)\")\n",
    "plt.ylabel(\"Weight (kg)\")\n",
    "plt.title(\"Height vs Weight by Gender\")\n",
    "plt.legend(title=\"Gender\")\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.scatterplot(x=dss[\"age\"], y=dss[\"weight\"], hue=dss[\"gender\"], style=dss[\"gender\"], s=100)\n",
    "plt.xlabel(\"Age \")\n",
    "plt.ylabel(\"Weight (kg)\")\n",
    "plt.title(\"Age vs Weight by Gender\")\n",
    "plt.legend(title=\"Gender\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.scatterplot(x=dss[\"age\"], y=dss[\"height\"], hue=dss[\"gender\"], style=dss[\"gender\"], s=100)\n",
    "plt.xlabel(\"Age \")\n",
    "plt.ylabel(\"Height (cm)\")\n",
    "plt.title(\"Age vs Height by Gender\")\n",
    "plt.legend(title=\"Gender\")\n",
    "plt.show()\n",
    "\n",
    "# Pairplot for all variables\n",
    "sns.pairplot(dss[['age','height', 'weight', 'gender']], hue=\"gender\", diag_kind=\"kde\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2b1322c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:35.462076Z",
     "iopub.status.busy": "2025-03-18T14:27:35.461747Z",
     "iopub.status.idle": "2025-03-18T14:27:35.467213Z",
     "shell.execute_reply": "2025-03-18T14:27:35.466250Z"
    },
    "papermill": {
     "duration": 0.017924,
     "end_time": "2025-03-18T14:27:35.468896",
     "exception": false,
     "start_time": "2025-03-18T14:27:35.450972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def set_data_types(data_types=[\"userAcceleration\"]):\n",
    "    \"\"\"\n",
    "    Select the sensors and the mode to shape the final dataset.\n",
    "    \n",
    "    Args:\n",
    "        data_types: A list of sensor data type from this list: [attitude, gravity, rotationRate, userAcceleration] \n",
    "\n",
    "    Returns:\n",
    "        It returns a list of columns to use for creating time-series from files.\n",
    "    \"\"\"\n",
    "    dt_list = []\n",
    "    for t in data_types:\n",
    "        if t != \"attitude\":\n",
    "            dt_list.append([t+\".x\",t+\".y\",t+\".z\"])\n",
    "        else:\n",
    "            dt_list.append([t+\".roll\", t+\".pitch\", t+\".yaw\"])\n",
    "\n",
    "    return dt_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "08d9dfd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:35.490002Z",
     "iopub.status.busy": "2025-03-18T14:27:35.489655Z",
     "iopub.status.idle": "2025-03-18T14:27:35.500182Z",
     "shell.execute_reply": "2025-03-18T14:27:35.499264Z"
    },
    "papermill": {
     "duration": 0.023082,
     "end_time": "2025-03-18T14:27:35.501883",
     "exception": false,
     "start_time": "2025-03-18T14:27:35.478801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def creat_time_series(dt_list, act_labels, trial_codes, mode=\"mag\", labeled=True):\n",
    "    \"\"\"\n",
    "    Args:\n",
    "        dt_list: A list of columns that shows the type of data we want.\n",
    "        act_labels: list of activites\n",
    "        trial_codes: list of trials\n",
    "        mode: It can be \"raw\" which means you want raw data\n",
    "        for every dimention of each data type,\n",
    "        [attitude(roll, pitch, yaw); gravity(x, y, z); rotationRate(x, y, z); userAcceleration(x,y,z)].\n",
    "        or it can be \"mag\" which means you only want the magnitude for each data type: (x^2+y^2+z^2)^(1/2)\n",
    "        labeled: True, if we want a labeld dataset. False, if we only want sensor values.\n",
    "\n",
    "    Returns:\n",
    "        It returns a time-series of sensor data.\n",
    "    \n",
    "    \"\"\"\n",
    "    num_data_cols = len(dt_list) if mode == \"mag\" else len(dt_list*3)\n",
    "\n",
    "    if labeled:\n",
    "        dataset = np.zeros((0,num_data_cols+7)) # \"7\" --> [act, code, weight, height, age, gender, trial] \n",
    "    else:\n",
    "        dataset = np.zeros((0,num_data_cols))\n",
    "        \n",
    "    # ds_list = get_ds_infos()\n",
    "    ds_list = dss\n",
    "    \n",
    "    print(\"[INFO] -- Creating Time-Series\")\n",
    "    for sub_id in ds_list[\"code\"]:\n",
    "        for act_id, act in enumerate(act_labels):\n",
    "            for trial in trial_codes[act_id]:\n",
    "                fname = '/kaggle/input/motionsense-dataset/A_DeviceMotion_data/A_DeviceMotion_data/'+act+'_'+str(trial)+'/sub_'+str(int(sub_id))+'.csv'\n",
    "                raw_data = pd.read_csv(fname)\n",
    "                raw_data = raw_data.drop(['Unnamed: 0'], axis=1)\n",
    "                vals = np.zeros((len(raw_data), num_data_cols))\n",
    "                for x_id, axes in enumerate(dt_list):\n",
    "                    if mode == \"mag\":\n",
    "                        vals[:,x_id] = (raw_data[axes]**2).sum(axis=1)**0.5        \n",
    "                    else:\n",
    "                        vals[:,x_id*3:(x_id+1)*3] = raw_data[axes].values\n",
    "                    vals = vals[:,:num_data_cols]\n",
    "                if labeled:\n",
    "                    lbls = np.array([[act_id,\n",
    "                            sub_id-1,\n",
    "                            ds_list[\"weight\"][sub_id-1],\n",
    "                            ds_list[\"height\"][sub_id-1],\n",
    "                            ds_list[\"age\"][sub_id-1],\n",
    "                            ds_list[\"gender\"][sub_id-1],\n",
    "                            trial          \n",
    "                           ]]*len(raw_data))\n",
    "                    vals = np.concatenate((vals, lbls), axis=1)\n",
    "                dataset = np.append(dataset,vals, axis=0)\n",
    "    cols = []\n",
    "    for axes in dt_list:\n",
    "        if mode == \"raw\":\n",
    "            cols += axes\n",
    "        else:\n",
    "            cols += [str(axes[0][:-2])]\n",
    "            \n",
    "    if labeled:\n",
    "        cols += [\"act\", \"id\", \"weight\", \"height\", \"age\", \"gender\", \"trial\"]\n",
    "    \n",
    "    dataset = pd.DataFrame(data=dataset, columns=cols)\n",
    "    return dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4cba9b84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:35.523424Z",
     "iopub.status.busy": "2025-03-18T14:27:35.523078Z",
     "iopub.status.idle": "2025-03-18T14:27:46.176549Z",
     "shell.execute_reply": "2025-03-18T14:27:46.175264Z"
    },
    "papermill": {
     "duration": 10.66637,
     "end_time": "2025-03-18T14:27:46.178356",
     "exception": false,
     "start_time": "2025-03-18T14:27:35.511986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] -- Selected sensor data types: ['attitude', 'userAcceleration']\n",
      "[INFO] -- Selected activites: ['dws', 'ups', 'wlk', 'jog']\n",
      "[INFO] -- Creating Time-Series\n",
      "[INFO] -- Shape of time-Series dataset:(767660, 13)\n"
     ]
    }
   ],
   "source": [
    "ACT_LABELS = [\"dws\",\"ups\", \"wlk\", \"jog\", \"std\", \"sit\"]\n",
    "TRIAL_CODES = {\n",
    "    ACT_LABELS[0]:[1,2,11],\n",
    "    ACT_LABELS[1]:[3,4,12],\n",
    "    ACT_LABELS[2]:[7,8,15],\n",
    "    ACT_LABELS[3]:[9,16],\n",
    "    ACT_LABELS[4]:[6,14],\n",
    "    ACT_LABELS[5]:[5,13]\n",
    "}\n",
    "\n",
    "## Here we set parameter to build labeld time-series from dataset of \"(A)DeviceMotion_data\"\n",
    "## attitude(roll, pitch, yaw); gravity(x, y, z); rotationRate(x, y, z); userAcceleration(x,y,z)\n",
    "sdt = [\"attitude\", \"userAcceleration\"]\n",
    "print(\"[INFO] -- Selected sensor data types: \"+str(sdt))    \n",
    "act_labels = ACT_LABELS [0:4]\n",
    "print(\"[INFO] -- Selected activites: \"+str(act_labels))    \n",
    "trial_codes = [TRIAL_CODES[act] for act in act_labels]\n",
    "dt_list = set_data_types(sdt)\n",
    "dataset = creat_time_series(dt_list, act_labels, trial_codes, mode=\"raw\", labeled=True)\n",
    "print(\"[INFO] -- Shape of time-Series dataset:\"+str(dataset.shape))    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d7e09726",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:46.200052Z",
     "iopub.status.busy": "2025-03-18T14:27:46.199697Z",
     "iopub.status.idle": "2025-03-18T14:27:46.257295Z",
     "shell.execute_reply": "2025-03-18T14:27:46.256202Z"
    },
    "papermill": {
     "duration": 0.070385,
     "end_time": "2025-03-18T14:27:46.259120",
     "exception": false,
     "start_time": "2025-03-18T14:27:46.188735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>attitude.roll</th>\n",
       "      <th>attitude.pitch</th>\n",
       "      <th>attitude.yaw</th>\n",
       "      <th>userAcceleration.x</th>\n",
       "      <th>userAcceleration.y</th>\n",
       "      <th>userAcceleration.z</th>\n",
       "      <th>act</th>\n",
       "      <th>id</th>\n",
       "      <th>weight</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>trial</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>341853</th>\n",
       "      <td>-0.794808</td>\n",
       "      <td>-1.211072</td>\n",
       "      <td>1.247998</td>\n",
       "      <td>0.498990</td>\n",
       "      <td>-0.174519</td>\n",
       "      <td>0.810820</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212195</th>\n",
       "      <td>-2.524847</td>\n",
       "      <td>-1.473858</td>\n",
       "      <td>2.879256</td>\n",
       "      <td>-0.624967</td>\n",
       "      <td>0.559276</td>\n",
       "      <td>0.096148</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373564</th>\n",
       "      <td>-0.259367</td>\n",
       "      <td>-1.234926</td>\n",
       "      <td>-0.561059</td>\n",
       "      <td>0.146235</td>\n",
       "      <td>0.179976</td>\n",
       "      <td>0.094853</td>\n",
       "      <td>2.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>167.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206337</th>\n",
       "      <td>0.414369</td>\n",
       "      <td>-1.418869</td>\n",
       "      <td>-0.411463</td>\n",
       "      <td>0.019961</td>\n",
       "      <td>-0.215105</td>\n",
       "      <td>0.072701</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110319</th>\n",
       "      <td>-2.487965</td>\n",
       "      <td>-1.425501</td>\n",
       "      <td>2.494338</td>\n",
       "      <td>0.108249</td>\n",
       "      <td>-0.143211</td>\n",
       "      <td>-0.145677</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150735</th>\n",
       "      <td>-2.603029</td>\n",
       "      <td>-1.400398</td>\n",
       "      <td>0.258393</td>\n",
       "      <td>0.159889</td>\n",
       "      <td>-0.975157</td>\n",
       "      <td>0.012907</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>164.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>690162</th>\n",
       "      <td>0.884707</td>\n",
       "      <td>-1.014825</td>\n",
       "      <td>-0.990651</td>\n",
       "      <td>-0.512271</td>\n",
       "      <td>-0.441017</td>\n",
       "      <td>0.464502</td>\n",
       "      <td>2.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>186.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>353338</th>\n",
       "      <td>-1.059454</td>\n",
       "      <td>-1.310430</td>\n",
       "      <td>1.909633</td>\n",
       "      <td>0.071177</td>\n",
       "      <td>0.252607</td>\n",
       "      <td>0.443894</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>167.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64816</th>\n",
       "      <td>1.356804</td>\n",
       "      <td>-0.995374</td>\n",
       "      <td>-2.716233</td>\n",
       "      <td>1.491234</td>\n",
       "      <td>-0.544574</td>\n",
       "      <td>0.479838</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>485051</th>\n",
       "      <td>0.712866</td>\n",
       "      <td>-0.820647</td>\n",
       "      <td>-1.270032</td>\n",
       "      <td>-0.278579</td>\n",
       "      <td>-0.583119</td>\n",
       "      <td>0.323087</td>\n",
       "      <td>2.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10037</th>\n",
       "      <td>1.577298</td>\n",
       "      <td>-1.062793</td>\n",
       "      <td>1.279993</td>\n",
       "      <td>-0.049473</td>\n",
       "      <td>-0.161330</td>\n",
       "      <td>0.026226</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>664210</th>\n",
       "      <td>-0.530542</td>\n",
       "      <td>-0.763442</td>\n",
       "      <td>-0.778452</td>\n",
       "      <td>0.119074</td>\n",
       "      <td>-0.396064</td>\n",
       "      <td>0.572896</td>\n",
       "      <td>2.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108006</th>\n",
       "      <td>-0.129277</td>\n",
       "      <td>-1.201384</td>\n",
       "      <td>-3.074879</td>\n",
       "      <td>-0.101890</td>\n",
       "      <td>0.451295</td>\n",
       "      <td>0.515705</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>734022</th>\n",
       "      <td>1.604867</td>\n",
       "      <td>-1.420758</td>\n",
       "      <td>2.583820</td>\n",
       "      <td>0.065439</td>\n",
       "      <td>0.123326</td>\n",
       "      <td>0.215642</td>\n",
       "      <td>2.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>170.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525366</th>\n",
       "      <td>-0.342919</td>\n",
       "      <td>-0.788110</td>\n",
       "      <td>-0.315868</td>\n",
       "      <td>-0.009732</td>\n",
       "      <td>-0.640525</td>\n",
       "      <td>0.985903</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224449</th>\n",
       "      <td>-3.097494</td>\n",
       "      <td>-1.273570</td>\n",
       "      <td>2.995422</td>\n",
       "      <td>-0.778563</td>\n",
       "      <td>-0.082053</td>\n",
       "      <td>-0.657571</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>638949</th>\n",
       "      <td>0.730822</td>\n",
       "      <td>-1.299815</td>\n",
       "      <td>3.117904</td>\n",
       "      <td>0.418667</td>\n",
       "      <td>0.081841</td>\n",
       "      <td>-0.113138</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>165.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394261</th>\n",
       "      <td>-1.519341</td>\n",
       "      <td>-1.068311</td>\n",
       "      <td>0.555977</td>\n",
       "      <td>0.086127</td>\n",
       "      <td>-0.487839</td>\n",
       "      <td>-0.117106</td>\n",
       "      <td>2.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>422635</th>\n",
       "      <td>1.239388</td>\n",
       "      <td>-1.051848</td>\n",
       "      <td>-1.996299</td>\n",
       "      <td>-0.258596</td>\n",
       "      <td>0.132651</td>\n",
       "      <td>-0.059347</td>\n",
       "      <td>2.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172135</th>\n",
       "      <td>0.983099</td>\n",
       "      <td>-1.448939</td>\n",
       "      <td>0.535832</td>\n",
       "      <td>-0.430239</td>\n",
       "      <td>0.236984</td>\n",
       "      <td>0.420255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        attitude.roll  attitude.pitch  attitude.yaw  userAcceleration.x  \\\n",
       "341853      -0.794808       -1.211072      1.247998            0.498990   \n",
       "212195      -2.524847       -1.473858      2.879256           -0.624967   \n",
       "373564      -0.259367       -1.234926     -0.561059            0.146235   \n",
       "206337       0.414369       -1.418869     -0.411463            0.019961   \n",
       "110319      -2.487965       -1.425501      2.494338            0.108249   \n",
       "150735      -2.603029       -1.400398      0.258393            0.159889   \n",
       "690162       0.884707       -1.014825     -0.990651           -0.512271   \n",
       "353338      -1.059454       -1.310430      1.909633            0.071177   \n",
       "64816        1.356804       -0.995374     -2.716233            1.491234   \n",
       "485051       0.712866       -0.820647     -1.270032           -0.278579   \n",
       "10037        1.577298       -1.062793      1.279993           -0.049473   \n",
       "664210      -0.530542       -0.763442     -0.778452            0.119074   \n",
       "108006      -0.129277       -1.201384     -3.074879           -0.101890   \n",
       "734022       1.604867       -1.420758      2.583820            0.065439   \n",
       "525366      -0.342919       -0.788110     -0.315868           -0.009732   \n",
       "224449      -3.097494       -1.273570      2.995422           -0.778563   \n",
       "638949       0.730822       -1.299815      3.117904            0.418667   \n",
       "394261      -1.519341       -1.068311      0.555977            0.086127   \n",
       "422635       1.239388       -1.051848     -1.996299           -0.258596   \n",
       "172135       0.983099       -1.448939      0.535832           -0.430239   \n",
       "\n",
       "        userAcceleration.y  userAcceleration.z  act    id  weight  height  \\\n",
       "341853           -0.174519            0.810820  2.0  10.0    70.0   178.0   \n",
       "212195            0.559276            0.096148  2.0   6.0    62.0   175.0   \n",
       "373564            0.179976            0.094853  2.0  11.0    60.0   167.0   \n",
       "206337           -0.215105            0.072701  2.0   6.0    62.0   175.0   \n",
       "110319           -0.143211           -0.145677  1.0   3.0    90.0   176.0   \n",
       "150735           -0.975157            0.012907  2.0   4.0    48.0   164.0   \n",
       "690162           -0.441017            0.464502  2.0  21.0   100.0   186.0   \n",
       "353338            0.252607            0.443894  0.0  11.0    60.0   167.0   \n",
       "64816            -0.544574            0.479838  3.0   1.0    72.0   180.0   \n",
       "485051           -0.583119            0.323087  2.0  15.0    96.0   172.0   \n",
       "10037            -0.161330            0.026226  1.0   0.0   102.0   188.0   \n",
       "664210           -0.396064            0.572896  2.0  20.0    52.0   165.0   \n",
       "108006            0.451295            0.515705  1.0   3.0    90.0   176.0   \n",
       "734022            0.123326            0.215642  2.0  22.0    68.0   170.0   \n",
       "525366           -0.640525            0.985903  2.0  16.0    76.0   180.0   \n",
       "224449           -0.082053           -0.657571  3.0   6.0    62.0   175.0   \n",
       "638949            0.081841           -0.113138  0.0  20.0    52.0   165.0   \n",
       "394261           -0.487839           -0.117106  2.0  12.0    60.0   178.0   \n",
       "422635            0.132651           -0.059347  2.0  13.0    70.0   180.0   \n",
       "172135            0.236984            0.420255  1.0   5.0    76.0   180.0   \n",
       "\n",
       "         age  gender  trial  \n",
       "341853  24.0     1.0    7.0  \n",
       "212195  30.0     0.0    8.0  \n",
       "373564  33.0     1.0    8.0  \n",
       "206337  30.0     0.0    7.0  \n",
       "110319  31.0     1.0    4.0  \n",
       "150735  23.0     0.0    7.0  \n",
       "690162  31.0     1.0    7.0  \n",
       "353338  33.0     1.0    1.0  \n",
       "64816   28.0     1.0    9.0  \n",
       "485051  29.0     0.0    7.0  \n",
       "10037   46.0     1.0    4.0  \n",
       "664210  24.0     1.0    8.0  \n",
       "108006  31.0     1.0    3.0  \n",
       "734022  25.0     0.0    8.0  \n",
       "525366  26.0     1.0    8.0  \n",
       "224449  30.0     0.0   16.0  \n",
       "638949  24.0     1.0    1.0  \n",
       "394261  33.0     1.0    7.0  \n",
       "422635  35.0     1.0    8.0  \n",
       "172135  28.0     1.0   12.0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.sample(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7e00cc21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:46.281386Z",
     "iopub.status.busy": "2025-03-18T14:27:46.281033Z",
     "iopub.status.idle": "2025-03-18T14:27:46.354696Z",
     "shell.execute_reply": "2025-03-18T14:27:46.353275Z"
    },
    "papermill": {
     "duration": 0.086544,
     "end_time": "2025-03-18T14:27:46.356340",
     "exception": false,
     "start_time": "2025-03-18T14:27:46.269796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 767660 entries, 0 to 767659\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   attitude.roll       767660 non-null  float64\n",
      " 1   attitude.pitch      767660 non-null  float64\n",
      " 2   attitude.yaw        767660 non-null  float64\n",
      " 3   userAcceleration.x  767660 non-null  float64\n",
      " 4   userAcceleration.y  767660 non-null  float64\n",
      " 5   userAcceleration.z  767660 non-null  float64\n",
      " 6   act                 767660 non-null  float64\n",
      " 7   id                  767660 non-null  float64\n",
      " 8   weight              767660 non-null  float64\n",
      " 9   height              767660 non-null  float64\n",
      " 10  age                 767660 non-null  float64\n",
      " 11  gender              767660 non-null  float64\n",
      " 12  trial               767660 non-null  float64\n",
      "dtypes: float64(13)\n",
      "memory usage: 76.1 MB\n"
     ]
    }
   ],
   "source": [
    "dataset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ca511c54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:46.378936Z",
     "iopub.status.busy": "2025-03-18T14:27:46.378597Z",
     "iopub.status.idle": "2025-03-18T14:27:46.398933Z",
     "shell.execute_reply": "2025-03-18T14:27:46.397756Z"
    },
    "papermill": {
     "duration": 0.033574,
     "end_time": "2025-03-18T14:27:46.400591",
     "exception": false,
     "start_time": "2025-03-18T14:27:46.367017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1.0, 2.0, 3.0, 4.0, 7.0, 8.0, 9.0, 11.0, 12.0, 15.0, 16.0]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(dataset['trial'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5838e69c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:46.423173Z",
     "iopub.status.busy": "2025-03-18T14:27:46.422781Z",
     "iopub.status.idle": "2025-03-18T14:27:46.426862Z",
     "shell.execute_reply": "2025-03-18T14:27:46.425790Z"
    },
    "papermill": {
     "duration": 0.017276,
     "end_time": "2025-03-18T14:27:46.428629",
     "exception": false,
     "start_time": "2025-03-18T14:27:46.411353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c992858c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:46.451124Z",
     "iopub.status.busy": "2025-03-18T14:27:46.450752Z",
     "iopub.status.idle": "2025-03-18T14:27:46.462906Z",
     "shell.execute_reply": "2025-03-18T14:27:46.461776Z"
    },
    "papermill": {
     "duration": 0.025494,
     "end_time": "2025-03-18T14:27:46.464830",
     "exception": false,
     "start_time": "2025-03-18T14:27:46.439336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class DataFrameSplitter:\n",
    "    def __init__(self, method=\"ratio\"):\n",
    "        self.method = method\n",
    "\n",
    "    def train_test_split(self, dataset, labels, verbose=0, **options):\n",
    "        if self.method == \"trials\":\n",
    "            train_trials = options.get('train_trials', None)\n",
    "            trial_col = options.get('trial_col', None)\n",
    "        elif self.method == \"ratio\":\n",
    "            train_ratio = options.get('train_ratio', None)\n",
    "        else:\n",
    "            raise ValueError(\"You must define the method of splitting: 'trials' or 'ratio'\")\n",
    "\n",
    "        columns = dataset.columns\n",
    "        train_data = pd.DataFrame(columns=columns)\n",
    "        test_data = pd.DataFrame(columns=columns)\n",
    "\n",
    "        label_values = list()\n",
    "        for label in labels:\n",
    "            unique_vals = sorted(dataset[label].unique())\n",
    "            label_values.append(unique_vals)\n",
    "        combs_of_label_values = list(itertools.product(*label_values))\n",
    "\n",
    "        for i, comb in enumerate(combs_of_label_values):\n",
    "            seg_data = dataset.copy()\n",
    "            for j, label in enumerate(labels):\n",
    "                seg_data = seg_data[seg_data[label] == comb[j]]\n",
    "            seg_data.reset_index(drop=True, inplace=True)\n",
    "\n",
    "            if seg_data.shape[0] > 0:\n",
    "                if self.method == \"trials\":\n",
    "                    if seg_data[trial_col][0] in train_trials:\n",
    "                        # train_data = train_data.concat(seg_data)\n",
    "                        train_data = pd.concat([train_data,seg_data])\n",
    "                    else:\n",
    "                        # test_data = test_data.append(seg_data)\n",
    "                        test_data = pd.concat([test_data, seg_data])\n",
    "                elif self.method == \"ratio\":\n",
    "                    split_index = int(seg_data.shape[0] * train_ratio)\n",
    "                    train_data = train_data.append(seg_data[:split_index])\n",
    "                    test_data = test_data.append(seg_data[split_index:])\n",
    "                    # test_data = = pd.concat([test_data,seg_data[split_index:] ])\n",
    "\n",
    "            if verbose > 2:\n",
    "                print(\"Seg_Shape:{} | TrainData:{} | TestData:{} | {}:{} | progress:{}%.\".format(\n",
    "                    seg_data.shape, train_data.shape, test_data.shape, labels, comb,\n",
    "                    round((i / len(combs_of_label_values)) * 100)))\n",
    "            elif verbose > 1:\n",
    "                print(\"Seg_Shape:{} | TrainData:{} | TestData:{} | {}:{} | progress:{}%.\".format(\n",
    "                    seg_data.shape, train_data.shape, test_data.shape, labels, comb,\n",
    "                    round((i / len(combs_of_label_values)) * 100)), end=\"\\r\")\n",
    "            elif verbose > 0:\n",
    "                print(\"progress:{}%.\".format(round((i / len(combs_of_label_values)) * 100)), end=\"\\r\")\n",
    "\n",
    "        assert dataset.shape[0] == train_data.shape[0] + test_data.shape[0]\n",
    "        assert dataset.shape[1] == train_data.shape[1] == test_data.shape[1]\n",
    "\n",
    "        return train_data, test_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "795f11b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:46.487652Z",
     "iopub.status.busy": "2025-03-18T14:27:46.487271Z",
     "iopub.status.idle": "2025-03-18T14:27:46.491356Z",
     "shell.execute_reply": "2025-03-18T14:27:46.490285Z"
    },
    "papermill": {
     "duration": 0.017425,
     "end_time": "2025-03-18T14:27:46.493128",
     "exception": false,
     "start_time": "2025-03-18T14:27:46.475703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# %pip install sensplit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "29d94c44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:46.515879Z",
     "iopub.status.busy": "2025-03-18T14:27:46.515528Z",
     "iopub.status.idle": "2025-03-18T14:27:46.519487Z",
     "shell.execute_reply": "2025-03-18T14:27:46.518349Z"
    },
    "papermill": {
     "duration": 0.017294,
     "end_time": "2025-03-18T14:27:46.521223",
     "exception": false,
     "start_time": "2025-03-18T14:27:46.503929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from sensplit.dataframe_splitter import DataFrameSplitter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2bbf4b08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:27:46.544121Z",
     "iopub.status.busy": "2025-03-18T14:27:46.543766Z",
     "iopub.status.idle": "2025-03-18T14:28:14.244891Z",
     "shell.execute_reply": "2025-03-18T14:28:14.243794Z"
    },
    "papermill": {
     "duration": 27.714549,
     "end_time": "2025-03-18T14:28:14.246736",
     "exception": false,
     "start_time": "2025-03-18T14:27:46.532187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-14-665d92f3db1e>:34: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n",
      "  train_data = pd.concat([train_data,seg_data])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Seg_Shape:(1066, 13) | TrainData:(24119, 13) | TestData:(1962, 13) | ('id', 'trial'):(0.0, 12.0) | progress:3%.\r"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-14-665d92f3db1e>:37: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n",
      "  test_data = pd.concat([test_data, seg_data])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Seg_Shape:(790, 13) | TrainData:(621973, 13) | TestData:(145687, 13) | ('id', 'trial'):(23.0, 16.0) | progress:100%.\r"
     ]
    }
   ],
   "source": [
    "dfs = DataFrameSplitter(method=\"trials\")\n",
    "\n",
    "train_data, test_data = dfs.train_test_split(dataset = dataset,\n",
    "                                             labels = (\"id\",\"trial\"), \n",
    "                                             trial_col='trial', \n",
    "                                             train_trials=[1.,2.,3.,4.,5.,6.,7.,8.,9.],\n",
    "                                             verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cdd1f46b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:28:14.286638Z",
     "iopub.status.busy": "2025-03-18T14:28:14.286143Z",
     "iopub.status.idle": "2025-03-18T14:28:14.293399Z",
     "shell.execute_reply": "2025-03-18T14:28:14.291998Z"
    },
    "papermill": {
     "duration": 0.030871,
     "end_time": "2025-03-18T14:28:14.295235",
     "exception": false,
     "start_time": "2025-03-18T14:28:14.264364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Features are Index(['attitude.roll', 'attitude.pitch', 'attitude.yaw', 'userAcceleration.x',\n",
      "       'userAcceleration.y', 'userAcceleration.z'],\n",
      "      dtype='object') \n",
      " Labels or Info are Index(['act', 'id', 'weight', 'height', 'age', 'gender', 'trial'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "Features = dataset.columns[:-7]\n",
    "labels_or_info = dataset.columns[-7:]\n",
    "print(\"Features are {} \\n Labels or Info are {}\".format(Features, labels_or_info))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a20256b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:28:14.345385Z",
     "iopub.status.busy": "2025-03-18T14:28:14.345040Z",
     "iopub.status.idle": "2025-03-18T14:28:14.382759Z",
     "shell.execute_reply": "2025-03-18T14:28:14.381496Z"
    },
    "papermill": {
     "duration": 0.066121,
     "end_time": "2025-03-18T14:28:14.384632",
     "exception": false,
     "start_time": "2025-03-18T14:28:14.318511",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train: x=(621973, 6), y=(621973, 7)\n",
      "Test:  x=(145687, 6), y=(145687, 7)\n"
     ]
    }
   ],
   "source": [
    "x_train = train_data[Features]\n",
    "y_train = train_data[labels_or_info]\n",
    "\n",
    "x_test = test_data[Features]\n",
    "y_test = test_data[labels_or_info]\n",
    "\n",
    "print(\"Train: x={}, y={}\\nTest:  x={}, y={}\".format(x_train.shape, y_train.shape, x_test.shape, y_test.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a88a03a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T14:28:14.421010Z",
     "iopub.status.busy": "2025-03-18T14:28:14.420636Z",
     "iopub.status.idle": "2025-03-18T14:28:21.992793Z",
     "shell.execute_reply": "2025-03-18T14:28:21.991633Z"
    },
    "papermill": {
     "duration": 7.592402,
     "end_time": "2025-03-18T14:28:21.994928",
     "exception": false,
     "start_time": "2025-03-18T14:28:14.402526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset_name = \"MotionSense\" \n",
    "x_train.to_csv(dataset_name+\"_x_train.csv\", index=False)\n",
    "x_test.to_csv(dataset_name+\"_x_test.csv\", index=False)\n",
    "y_train.to_csv(dataset_name+\"_y_train.csv\", index=False)\n",
    "y_test.to_csv(dataset_name+\"_y_test.csv\", index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 16752,
     "sourceId": 22073,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 57.105947,
   "end_time": "2025-03-18T14:28:22.732947",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-18T14:27:25.627000",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
